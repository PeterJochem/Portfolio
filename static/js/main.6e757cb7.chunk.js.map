{"version":3,"sources":["index.js"],"names":["Square","props","state","value","className","onClick","this","React","Component","Board","squares","Array","fill","player1Turn","gameOver","loggedOver","mySquares","i","condition1","condition2","condition3","alert","setState","allFilled","slice","checkWin","checkTie","handleClick","console","log","renderSquare","Game","someBoolean","document","title","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6e757cb7.chunk.js","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Tell webpack that Button.js uses these styles\n\n//const node = document.getElementById(\"root\");\n\n\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n    };\n  }\n  render() {\n    return (\n      // Buttons have built in event listeners - so we have that going\n      // Simply give the button a user defined function to run when a click \n      // is detected \n      <button className=\"square\" onClick={() => this.props.onClick()  } >\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      player1Turn: true,\n      gameOver: false,\n      loggedOver: false\n    };\n  }\n  \n  // traverse the board to check for wins!\n  checkWin(mySquares) {\n\t\t\n\t  var gameOver = false;\n\t   \n\t  // Check horizontal\n\t  var i;\n\t  for (i = 0; i < 3; ++i) {\n\t\t\n\t\t  var condition1 = mySquares[3*i + 0] === mySquares[3*i + 1];\n\t\t  var condition2 = mySquares[3*i + 0] === mySquares[3*i + 2];\n\t\t  var condition3 = mySquares[3*i + 0] !== null;\n\t\t  if ( condition1 && condition2 && condition3 ) {\n\t\t  \tgameOver = true;\n\t\t  }\n\t  }\n\n\t  // Check vertical\n\t  for (i = 0; i < 3; ++i) {\n\n                  condition1 = mySquares[i] === mySquares[i + 3];\n                  condition2 = mySquares[i] === mySquares[i + 6];\n                  condition3 = mySquares[i] !== null;\n                  if ( condition1 && condition2 && condition3 ) {\n                  \t gameOver = true;\n\t\t  }\n          }\n\t\n\t  // Check diagonals\n          condition1 = mySquares[0] === mySquares[4];\n          condition2 = mySquares[0] === mySquares[8];\n          condition3 = mySquares[0] !== null;\n          if ( condition1 && condition2 && condition3 ) {\n          \t gameOver = true;\n\t  }\n\n\t  condition1 = mySquares[2] === mySquares[4];\n          condition2 = mySquares[2] === mySquares[6];\n          condition3 = mySquares[2] !== null;\n          if ( condition1 && condition2 && condition3 ) {\n\t  \t gameOver = true;\n\t  }\n\t\t\n\t  if (gameOver === true) {\n\t\talert(\"GameOver\");\n\t\tthis.setState({squares: Array(9).fill(null), player1Turn: true});\n\t  }\n  }\n \n  /* This traverses the board checking if the game is a tie\n   * mySquares is the boards state. It is a 9 item array of items\n   */\n  checkTie(mySquares) {\n\t\n\tvar i;\n\tvar allFilled = true;\n\tfor (i = 0; i < 9; ++i) {\n\t\tif ( mySquares[i] === null ) {\n\t\t\tallFilled = false;\n\t\t}\n\t}\n\n\tif (allFilled === true ) {\n\t\t// Reset the board\n\t\talert(\"Tie\");\n\t\t this.setState({squares: Array(9).fill(null), player1Turn: true});\n\t}\n\n  }\n\n  /* This runs when a square is clicked\n   * i denotes which square in the boars has been clicked\n   */\n  handleClick(i) {\n    \n    // Copy the data structure with .slice \n    const squares = this.state.squares.slice();\n    \n    if ( (this.state.player1Turn === true) && (squares[i] === null) ) {\n      squares[i] = 'X';\n      //this.state.player1Turn = !this.state.player1Turn;\n      this.setState({player1Turn: !this.state.player1Turn});\n    }\n    else if ( (squares[i] == null) ){\n      squares[i] = 'O';\n      //this.state.player1Turn = !this.state.player1Turn;\n      this.setState({player1Turn: !this.state.player1Turn});\n    }\n    else {\n\t// The user is trying to play where a piece already is\n\talert(\"Illegal Move!\");\n    }\n\t\n    // Update the state of the component\n    this.setState({squares: squares}); \n\n    this.checkWin(squares);\n    this.checkTie(squares);\n  }\n  \n  renderSquare(i) {\n    return <Square value={this.state.squares[i] } onClick={() => this.handleClick(i)} />;\n  }\n  \n  endGame() {\n\t  if ( this.state.gameOver === true) {\n          \t//alert(\"Game Over\");\n          \tconsole.log(\"Game Over\");\n\t\t//this.state.loggedOver = true;\n\t  }\n  }\n  \n\n  render() {\n    const status = 'Tic Tac Toe';\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n\t<div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n\n// Set the browser tab name\ncomponentDidMount(){\n    document.title = \"Tic_Tac_Toe\"\n}\n\nconstructor(props) {\n    super(props);\n    this.state = {\n      someBoolean: false,\n    };\n  }\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render( <Game />, document.getElementById('root') );\n\n"],"sourceRoot":""}